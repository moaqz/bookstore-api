basePath: /api/v1
definitions:
  domain.Book:
    properties:
      about_the_book:
        type: string
      author_avatar:
        type: string
      author_name:
        type: string
      category_id:
        type: integer
      image:
        type: string
      language:
        type: string
      page_count:
        type: integer
      price:
        type: number
      subtitle:
        type: string
      title:
        type: string
    required:
    - about_the_book
    - author_avatar
    - author_name
    - category_id
    - image
    - language
    - page_count
    - price
    - subtitle
    - title
    type: object
  domain.Books:
    properties:
      author_name:
        type: string
      id:
        type: integer
      image:
        type: string
      subtitle:
        type: string
      title:
        type: string
    type: object
  domain.Category:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  domain.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      is_staff:
        type: boolean
    type: object
  domain.LoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 28
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  domain.SignUpRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 28
        minLength: 8
        type: string
      password_confirmation:
        maxLength: 28
        minLength: 8
        type: string
    required:
    - email
    - password
    - password_confirmation
    type: object
  domain.TokenResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  httpErrors.EmptyBody:
    type: object
  httpErrors.RestError:
    properties:
      causes: {}
      error:
        type: string
      status:
        type: integer
    type: object
host: localhost:3009
info:
  contact: {}
  description: This API returns information about books.
  license:
    name: MIT
    url: https://mit-license.org/
  termsOfService: http://swagger.io/terms/
  title: Book Store API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get a list of books. Use page and size GET arguments to regulate
        the number of objects returned and the page, respectively.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Size number
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Books'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpErrors.EmptyBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Get a list of books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a book object.
      parameters:
      - description: New Book data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.Book'
      - description: With the bearer started. Only staff members
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Create a new book
      tags:
      - books
  /books/{book_id}:
    delete:
      consumes:
      - application/json
      description: Delete a book object.
      parameters:
      - description: Book ID
        in: path
        name: book_id
        required: true
        type: integer
      - description: With the bearer started. Only staff members
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get a specific book object. Id parameter must be an integer.
      parameters:
      - description: Book ID
        in: path
        name: book_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Get a book by its id
      tags:
      - books
  /books/category/{category_name}:
    get:
      consumes:
      - application/json
      description: Get a list of books by category. Use page and size GET arguments
        to regulate the number of objects returned and the page, respectively.
      parameters:
      - description: Category name
        in: path
        name: category_name
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Size number
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Books'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpErrors.EmptyBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Get a list of books by category
      tags:
      - books
  /categories:
    get:
      consumes:
      - application/json
      description: Get a list of categories. Use page and size GET arguments to regulate
        the number of objects returned and the page, respectively.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Size number
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Category'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpErrors.EmptyBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Get a list of categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category object.
      parameters:
      - description: New Category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      - description: With the bearer started. Only staff members
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Create a new category
      tags:
      - categories
  /categories/{category_id}:
    delete:
      consumes:
      - application/json
      description: Delete a category object.
      parameters:
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      - description: With the bearer started. Only staff members
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Delete a category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get a specific category object. Id parameter must be an integer.
      parameters:
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Category'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Get a category by its id
      tags:
      - categories
    patch:
      consumes:
      - application/json
      description: Update a category object by its Id.
      parameters:
      - description: Updated Category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      - description: With the bearer started. Only staff members
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpErrors.RestError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpErrors.RestError'
      summary: Update a category
      tags:
      - categories
  /user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete the current user account
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: With the bearer started.
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete current user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get id, username, email, first name, last name and bio from a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetUserResponse'
      summary: Get an user account data
      tags:
      - users
  /user/login:
    post:
      consumes:
      - application/json
      description: Login a user using email and password receive a JWT as a response
        from a successful login
      parameters:
      - description: 'Login data: email and password'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.TokenResponse'
      summary: Login a user
      tags:
      - users
  /user/signup:
    post:
      consumes:
      - application/json
      description: Register a user using email, username, password and password confirmation
      parameters:
      - description: 'Login data: email, password and password confirmation'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.TokenResponse'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
